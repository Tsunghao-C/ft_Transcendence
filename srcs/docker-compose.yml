networks:
  frontend:
  backend:
    internal: true
  game:
    internal: true
  monitoring:
    internal: true

volumes:
  vault_data: {}
  auth_db_data: {}
  game_db_data: {}
  redis_data: {}
  prometheus_data: {}
  grafana_data: {}
  es_data: {}

services:
  # Security Layer
  waf:
    container_name: waf
    image: owasp/modsecurity-crs:nginx
    ports:
      - "443:443"
    volumes:
      - ./waf/rules:/etc/modsecurity.d/rules
    networks:
      - frontend
    restart: unless-stopped

  vault:
    container_name: vault
    image: hashicorp/vault
    cap_add:
      - IPC_LOCK
    ports:
      - "8200:8200"
    volumes:
      - vault_data:/vault/file
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=dev-token
    networks:
      - backend
    restart: unless-stopped

  # Frontend & Gateway
  nginx:
    container_name: nginx
    image: nginx:1-alpine
    depends_on:
      - waf
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/certs:/etc/nginx/certs
    networks:
      - frontend
      - backend
    restart: unless-stopped

  spa:
    container_name: spa
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modues
    networks:
      - frontend
    restart: unless-stopped
  
  # Auth Layer
  oauth:
    container_name: oauth
    build: ./oauth
    environment:
      - VAULT_ADDR=http://vault:8200
    networks:
      - backend
  
  auth_service:
    container_name: auth_service
    build: ./auth
    environment:
      - VAULT_ADDR=http://vault:8200
    networks:
      - backend
  
  two_fa:
    container_name: two_fa
    build: ./2fa
    networks:
      - backend
  
  # Game Services
  game_server:
    container_name: game_server
    build: ./game_server
    networks:
      - backend
      - game
  
  game_state:
    container_name: game_state
    build: ./game_state
    networks:
      - game
  
  matchmaking:
    container_name: game_match
    build: ./matchmaking
    networks:
      - game

  # Database Layer
  auth_db:
    container_name: db_auth
    image: postgres:14-alpine
    volumes:
      - auth_db_data:/var/lib/postgresql/data
    networks:
      - backend
  
  game_db:
    container_name: db_game
    image: postgres:14-alpine
    volumes:
      - game_db_data:/var/lib/postgresql/data
    networks:
      - game

  redis:
    container_name: redis
    image: redis:alpine
    volumes:
      - redis_data:/data
    networks:
      - backend
      - game

  # Monitoring Stack
  prometheus:
    container_name: prometheus
    image: prom/prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring
    restart: unless-stopped
  
  grafana:
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - monitoring
    restart: unless-stopped
  
  cadvisor:
    container_name: cadvisor
    image: 
    networks:
      - monitoring
  
  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:8.7.0
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - monitoring
  
  logstash:
    container_name: logstash
    image: logstash:8.7.0
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    networks:
      - monitoring
  
  kibana:
    container_name: kibana
    image: kibana:8.7.0
    networks:
      - monitoring
