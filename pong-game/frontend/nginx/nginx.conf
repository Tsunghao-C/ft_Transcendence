worker_processes 1;
# pid /tmp/nginx/nginx.pid;  # Changed PID location

load_module modules/ngx_http_modsecurity_module.so;

events {
    multi_accept on;
    worker_connections 1024;
}

http {

    include       mime.types;
    default_type  application/octet-stream;

    client_max_body_size 8M;

    # Logging
    access_log /dev/stdout;
    error_log /dev/stderr;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
    # Basic settings
    sendfile        on;
    keepalive_timeout  65;

    # SSL Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    # SSL configuration
    ssl_certificate /etc/nginx/ssl/selfsigned.crt;
    ssl_certificate_key /etc/nginx/ssl/selfsigned.key;

# If we use WAF, this part is handled already
    server {
        listen 80;
        server_name localhost;
        return 301 https://$host:8443$request_uri;

        # Activate ModSecurity # Do we want to WAF on 80 ?
        modsecurity on;
        modsecurity_rules_file /etc/nginx/modsecurity/modsecurity.conf;
        }

    server {
        listen 443 ssl; # if we don't use WAF
        server_name localhost;

        # Activate ModSecurity WAF
        modsecurity on;
        modsecurity_rules_file /etc/nginx/modsecurity/modsecurity.conf;

        # If we use WAF, this part is handled already

        # Health check endpoint

        # Frontend SPA
        location / {
            root /usr/share/nginx/html;
            index index.html;
            ## Waiting for SPA ready
            # set $upstream_spa "spa:3000";
            # proxy_pass http://$upstream_spa;

            # proxy_http_version 1.1;
            # proxy_set_header Upgrade $http_upgrade;
            # proxy_set_header Connection 'upgrade';
            # proxy_set_header Host $host;
            # proxy_cache_bypass $http_upgrade;

            # root /usr/share/nginx/html;
            # try_files $uri $uri/ /index.html;
        }

        location /health {
            access_log off;
            add_header  Content-Type text/plain;
            return 200 'healthy\n';
        }

        # API routes
        location /api/ {
            # Auth Service
            location /api/auth/ {
                set $upstream_auth "auth_service:8001";
                proxy_pass http://$upstream_auth;
            }

            # User Service
            location /api/users/ {
                set $upstream_user "user_service:8002";
                proxy_pass http://$upstream_user;
            }

            # Game Service
            location /api/game/ {
                set $upstream_game "game_service:8004";
                proxy_pass http://$upstream_game;
            }

            # Common headers for all API routes
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # WebSocket for game
        location /ws/ {
            set $upstream_game "game_service:8004";
            proxy_pass http://$upstream_game;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # # Monitoring endpoints
        # location /grafana/ {
        #     set $upstream_grafana "grafana:3001";
        #     proxy_pass http://$upstream_grafana/;
        #     proxy_set_header Host $host;
        # }

        # location /prometheus/ {
        #     set $upstream_prometheus "prometheus:9090";
        #     proxy_pass http://$upstream_prometheus/;
        #     proxy_set_header Host $host;
        # }

        # location /kibana/ {
        #     set $upstream_kibana "kibana:5601";
        #     proxy_pass http://$upstream_kibana/;
        #     proxy_set_header Host $host;
        # }
    }
}