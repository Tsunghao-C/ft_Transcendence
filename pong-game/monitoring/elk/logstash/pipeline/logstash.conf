input {
  beats {
    port => 5044
    ssl_enabled => true
    ssl_certificate => "/usr/share/logstash/config/certs/logstash.crt"
    ssl_key => "/usr/share/logstash/config/certs/logstash.key"
    ssl_certificate_authorities => ["/usr/share/logstash/config/certs/ca.crt"]
    ssl_verify_mode => "force_peer"
  }
}

filter {
  # Web Traffic Processing
  if [fields][type] == "nginx" {
    # Common processing for all nginx logs
    mutate {
      add_field => { "type" => "%{[fields][type]}" }
    }

    # Access logs specific processing
    if [fields][source] == "access" {
      json {
        source => "message"
      }
      date {
        match => [ "time_local", "dd/MMM/yyyy:HH:mm:ss Z" ]
        target => "@timestamp"
      }
      mutate {
        convert => {
          "status" => "integer"
          "body_bytes_sent" => "integer"
          "request_time" => "float"
          "upstream_response_time" => "float"
        }
      }
      geoip {
        source => "remote_addr"
        target => "geo"
      }
      useragent {
        source => "http_user_agent"
        target => "user_agent"
      }
      if [modsec_transaction_id] != "" {
        mutate {
          add_tag => ["waf_event"]
        }
      }
    }

    # Error logs specific processing
    if [fields][source] == "error" {
      grok {
        match => { "message" => "%{YEAR}/%{MONTHNUM}/%{MONTHDAY} %{TIME} \[%{LOGLEVEL:log_level}\] %{POSINT:process_id}#%{POSINT:thread_id}: \*%{NUMBER:connection_id} %{GREEDYDATA:error_message}" }
      }
      date {
        match => ["timestamp", "yyyy/MM/dd HH:mm:ss" ]
        target => "@timestamp"
      }
      if [error_message] =~ "matches" {
        mutate {
          add_tag => ["waf_detection"]
        }
      }
    }
  }
  # WAF Log Processing (ModSecurity)
  else if [fields][type] == "waf" {
    mutate {
      add_field => { "type" => "%{[fields][type]}" }
    }
    # Audit log processing
    if [fields][source] == "audit" {
      # Parse ModSecurity audit log sections
      grok {
        match => { "message" => "(?m)^--(%{NOTSPACE:transaction_id})-(%{WORD:section_letter})--\n%{GREEDYDATA:section_content}" }
        tag_on_failure => ["_grokparsefailure", "waf_audit_parse_failure"]
      }
      
      # Process different sections based on their letter
      if [section_letter] == "A" {
        # Transaction metadata
        grok {
          match => { "section_content" => "\[%{HTTPDATE:timestamp}\] %{NUMBER:unique_id:float} %{IP:client_ip} %{NUMBER:client_port:int} %{IP:server_ip} %{NUMBER:server_port:int}" }
          tag_on_failure => ["_section_A_parse_failure"]
        }
        date {
          match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
          target => "@timestamp"
        }
      }
      else if [section_letter] == "B" {
        # Request headers
        grok {
          match => { "section_content" => "(?m)%{WORD:http_method} %{NOTSPACE:uri} HTTP/%{NUMBER:http_version}\n%{GREEDYDATA:request_headers}" }
          tag_on_failure => ["_section_B_parse_failure"]
        }
        kv {
          source => "request_headers"
          field_split => "\n"
          value_split => ": "
          target => "parsed_request_headers"
        }
      }
      else if [section_letter] == "F" {
        # Response headers
        grok {
          match => { "section_content" => "HTTP/%{NUMBER:response_http_version} %{NUMBER:response_status:int}[^\\n]*\n%{GREEDYDATA:response_headers}" }
          tag_on_failure => ["_section_F_parse_failure"]
        }
        kv {
          source => "response_headers"
          field_split => "\n"
          value_split => ": "
          target => "parsed_response_headers"
        }
      }
      else if [section_letter] == "H" {
        # Audit log trailer
        kv {
          source => "section_content"
          field_split => "\n"
          value_split => ": "
          target => "audit_details"
        }
      }

      # Add severity based on response status
      if [response_status] =~ /^4\d\d/ {
        mutate {
          add_field => { "severity" => "warning" }
        }
      } else if [response_status] =~ /^5\d\d/ {
        mutate {
          add_field => { "severity" => "error" }
        }
      }

      # Add enrichments
      if [client_ip] {
        geoip {
          source => "client_ip"
          target => "geo"
        }
      }

      # Add attack type detection
      if [uri] =~ /<script>/ {
        mutate {
          add_field => { "attack_type" => "xss" }
        }
      }
    }

    else if [fields][source] == "debug" {
      grok {
        match => { "message" => "\[%{NUMBER:timestamp:float}\] \[%{DATA:uri}\] \[%{NUMBER:session_id}\] %{GREEDYDATA:debug_message}" }
        tag_on_failure => ["_debug_parse_failure"]
      }
      # Add rule matching information
      if [debug_message] =~ /Rule (\d+) returned/ {
        grok {
          match => {
            "debug_message" => "Rule (?<rule_id>\d+) returned (?<rule_return>\d+)"
          }
        }
      }
    }
  }
  ## Adding more filters for future data source
  # # Application Logs Processing
  # if [fields][type] == "application" {
  #   if [fields][service] == "auth" {
  #     grok {
  #       match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:message}" }
  #     }
  #     # Add authentication-specific processing
  #   }

  #   if [fields][service] == "game" {
  #     grok {
  #       match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:message}" }
  #     }
  #     # Add game-specific processing
  #   }
  # }
}
    
output {
  # Route logs to different indices based on category
  if [fields][type] == "nginx" {
    if [fields][source] == "access" {
      elasticsearch {
        hosts => ["https://elasticsearch:9200"]
        user => "${ELASTIC_USER}"
        password => "${ELASTIC_PASSWORD}"
        ssl_verification_mode => "full"
        ssl_certificate_authorities => ["/usr/share/logstash/config/certs/ca.crt"]
        index => "nginx-access-logs-%{+YYYY.MM.dd}"
      }
    }
    else if [fields][source] == "error" {
      elasticsearch {
        hosts => ["https://elasticsearch:9200"]
        user => "${ELASTIC_USER}"
        password => "${ELASTIC_PASSWORD}"
        ssl_verification_mode => "full"
        ssl_certificate_authorities => ["/usr/share/logstash/config/certs/ca.crt"]
        index => "nginx-error-logs-%{+YYYY.MM.dd}"
      }
    }
  }
  else if [fields][type] == "waf" {
    if [fields][source] == "audit" {
      elasticsearch {
        hosts => ["https://elasticsearch:9200"]
        user => "${ELASTIC_USER}"
        password => "${ELASTIC_PASSWORD}"
        ssl_verification_mode => "full"
        ssl_certificate_authorities => ["/usr/share/logstash/config/certs/ca.crt"]
        index => "waf-audit-%{+YYYY.MM.dd}"
      }
    }
    else if [fields][source] == "debug" {
      elasticsearch {
        hosts => ["https://elasticsearch:9200"]
        user => "${ELASTIC_USER}"
        password => "${ELASTIC_PASSWORD}"
        ssl_verification_mode => "full"
        ssl_certificate_authorities => ["/usr/share/logstash/config/certs/ca.crt"]
        index => "waf-debug-%{+YYYY.MM.dd}"
      }
    }
  }
  # # Added later when they are ready
  # else if [category] == "security" {
  #   elasticsearch {
  #     hosts => ["https://elasticsearch:9200"]
        # user => "${ELASTIC_USER}"
        # password => "${ELASTIC_PASSWORD}"
  #     index => "security-logs-%{+YYYY.MM.dd}"
  #   }
  # }
  # else if [category] == "gameplay" {
  #   elasticsearch {
  #     hosts => ["https://elasticsearch:9200"]
        # user => "${ELASTIC_USER}"
        # password => "${ELASTIC_PASSWORD}"
  #     index => "game-logs-%{+YYYY.MM.dd}"
  #   }
  # }
  else {
    elasticsearch {
      hosts => ["https://elasticsearch:9200"]
      user => "${ELASTIC_USER}"
      password => "${ELASTIC_PASSWORD}"
      ssl_verification_mode => "full"
      ssl_certificate_authorities => ["/usr/share/logstash/config/certs/ca.crt"]
      index => "other-logs-%{+YYYY.MM.dd}"
    }
  }
  # Debug output
  stdout { codec => rubydebug}
}